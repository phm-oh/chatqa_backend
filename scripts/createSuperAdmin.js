// Path: scripts/createSuperAdmin.js
// ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: node scripts/createSuperAdmin.js

require('dotenv').config();
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const readline = require('readline');

// Import models
const Admin = require('../models/admin');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

const createSuperAdmin = async () => {
  try {
    // Connect to MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Super Admin ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingSuperAdmin = await Admin.findOne({ role: 'super_admin' });
    
    if (existingSuperAdmin) {
      console.log('‚ùå Super Admin already exists!');
      console.log('Existing Super Admin:', existingSuperAdmin.username);
      process.exit(1);
    }

    console.log('üîß Creating Super Admin Account...\n');

    // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const username = await question('Username: ');
    const email = await question('Email: ');
    const fullName = await question('Full Name: ');
    
    // ‡∏£‡∏±‡∏ö password ‡πÅ‡∏ö‡∏ö‡∏ã‡πà‡∏≠‡∏ô (‡∏á‡πà‡∏≤‡∏¢‡πÜ)
    const password = await question('Password: ');
    const confirmPassword = await question('Confirm Password: ');

    if (password !== confirmPassword) {
      console.log('‚ùå Passwords do not match!');
      process.exit(1);
    }

    if (password.length < 6) {
      console.log('‚ùå Password must be at least 6 characters!');
      process.exit(1);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏´‡∏£‡∏∑‡∏≠ email ‡∏ã‡πâ‡∏≥‡πÑ‡∏´‡∏°
    const existingAdmin = await Admin.findOne({
      $or: [
        { username: username.toLowerCase() },
        { email: email.toLowerCase() }
      ]
    });

    if (existingAdmin) {
      console.log('‚ùå Username or Email already exists!');
      process.exit(1);
    }

    // Hash password
    const saltRounds = parseInt(process.env.BCRYPT_SALT_ROUNDS) || 12;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Super Admin
    const superAdmin = new Admin({
      username: username.toLowerCase(),
      email: email.toLowerCase(),
      password: hashedPassword,
      fullName: fullName,
      role: 'super_admin',
      isActive: true
    });

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á database (‡∏Ç‡πâ‡∏≤‡∏° pre-save middleware)
    const savedAdmin = await superAdmin.save();

    console.log('\n‚úÖ Super Admin created successfully!');
    console.log('üìã Details:');
    console.log(`   - ID: ${savedAdmin._id}`);
    console.log(`   - Username: ${savedAdmin.username}`);
    console.log(`   - Email: ${savedAdmin.email}`);
    console.log(`   - Full Name: ${savedAdmin.fullName}`);
    console.log(`   - Role: ${savedAdmin.role}`);
    console.log(`   - Created At: ${savedAdmin.createdAt}`);

    console.log('\nüîê You can now login with:');
    console.log(`   - Username: ${savedAdmin.username}`);
    console.log(`   - Password: [the password you entered]`);

  } catch (error) {
    console.error('‚ùå Error creating Super Admin:', error.message);
    
    if (error.name === 'ValidationError') {
      const errors = Object.values(error.errors).map(err => err.message);
      console.log('Validation Errors:', errors);
    }
  } finally {
    rl.close();
    mongoose.connection.close();
    process.exit(0);
  }
};

createSuperAdmin();